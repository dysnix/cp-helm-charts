{{- if .Capabilities.APIVersions.Has "apps/v1" }}
apiVersion: apps/v1
{{- else }}
apiVersion: apps/v1beta2
{{- end }}
kind: Deployment
metadata:
  name: {{ template "cp-ksql-server.fullname" . }}
  labels:
    app: {{ template "cp-ksql-server.name" . }}
    chart: {{ template "cp-ksql-server.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "cp-ksql-server.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "cp-ksql-server.name" . }}
        release: {{ .Release.Name }}
      {{- if or .Values.podAnnotations .Values.metrics.enabled .Values.secretConfOverrides }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- if and .Values.metrics.enabled (not .Values.metrics.serviceMonitor.enabled) }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.metrics.port | quote }}
      {{- end }}
        {{- if .Values.secretConfOverrides }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.metrics.enabled }}
        checksum/jmx-configmap: {{ include (print $.Template.BasePath "/jmx-configmap.yaml") . | sha256sum }}
        {{- end }}
      {{- end }}
    spec:
      {{- if .Values.metrics.enabled }}
      initContainers:
        - name: jmx
          image: appropriate/curl:latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
          {{- $version := .Values.metrics.agent.version }}
          - >
              cd /etc/jmx-agent &&
              curl -sSL --remote-name-all
              https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/{{ $version }}/jmx_prometheus_javaagent-{{ $version }}.jar{,\.sha1} &&
              printf "$(cat jmx_prometheus_javaagent-{{ $version }}.jar.sha1)  jmx_prometheus_javaagent-{{ $version }}.jar" | sha1sum -c
          volumeMounts:
          - name: jmx-agent
            mountPath: /etc/jmx-agent
          - name: jmx-config
            mountPath: /etc/jmx-kafka-connect
      {{- end }}
      containers:
        - name: ksql
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          ports:
            - name: ksql-server
              containerPort: 8088
              protocol: TCP
            - name: jmx
              containerPort: 5555
              protocol: TCP
            {{- if .Values.metrics.enabled }}
            - name: metrics
              containerPort: 5556
              protocol: TCP
            {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
          {{- if .Values.ksql.headless }}
          - name: ksql-queries
            mountPath: /etc/ksql/queries
          {{- end }}
          {{- if .Values.secretConfOverrides }}
          envFrom:
          - secretRef:
              name: {{ template "cp-ksql-server.fullname" . }}-env
          {{- end }}
          env:
          - name: KSQL_BOOTSTRAP_SERVERS
            value: {{ template "cp-ksql-server.kafka.bootstrapServers" . }}
          - name: KSQL_KSQL_SERVICE_ID
            value: {{ template "cp-ksql-server.serviceId" . }}
          - name: KSQL_KSQL_SCHEMA_REGISTRY_URL
            value: {{ template "cp-ksql-server.cp-schema-registry.service-name" . }}
          - name: KSQL_HEAP_OPTS
            value: "{{ .Values.heapOptions }}"
          {{- if .Values.ksql.headless }}
          - name: KSQL_KSQL_QUERIES_FILE
            value: /etc/ksql/queries/queries.sql
          {{- else }}
          - name: KSQL_LISTENERS
            value: http://0.0.0.0:8088
          {{- end }}
          {{- range $key, $value := .Values.configurationOverrides }}
          - name: {{ printf "KSQL_%s" $key | replace "." "_" | upper | quote }}
            value: {{ $value | quote }}
          {{- end }}
          {{- range $key, $value := .Values.customEnv }}
          - name: {{ $key | quote }}
            value: {{ $value | quote }}
          {{- end }}
          - name: KSQL_JMX_PORT
            value: "{{ .Values.jmx.port }}"
          - name: KSQL_OPTS
            value: {{ include "cp-ksql-server.extraJavaArgs" . | quote }}
          volumeMounts:
          {{- if .Values.metrics.enabled }}
          - name: jmx-agent
            mountPath: /etc/jmx-agent
          - name: jmx-config
            mountPath: /etc/jmx-kafka-connect
          {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.metrics.enabled }}
      - name: jmx-agent
        emptyDir: {}
      - name: jmx-config
        configMap:
          name: {{ template "cp-ksql-server.fullname" . }}-jmx-configmap
      {{- end }}
      {{- if .Values.ksql.headless }}
      - name: ksql-queries
        configMap:
          name: {{ template "cp-ksql-server.fullname" . }}-ksql-queries-configmap
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
